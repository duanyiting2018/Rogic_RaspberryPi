pi@raspberrypi:~ $ pwd
/home/pi
pi@raspberrypi:~ $ ls -l
total 1056
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Desktop
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Documents
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Downloads
-rw-r--r-- 1 pi pi 857528 Jun  5  2017 master.zip
drwxr-xr-x 3 pi pi   4096 Apr 11  2017 mjpg-streamer-master
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Music
drwxr-xr-x 2 pi pi   4096 Jan 19 00:25 myfiles
drwxr-xr-x 2 pi pi   4096 Jan 19  2019 myfiles2
drwxr-xr-x 2 pi pi   4096 Jan 19 00:00 myfiles3
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Pictures
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Public
drwxr-xr-x 2 pi pi   4096 Apr 18  2018 python
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 python_games
drwxr-xr-x 2 pi pi   4096 Apr 13  2018 SmartCar
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Templates
drwxrwxrwx 3 pi pi   4096 Apr 10  2018 tools
drwxr-xr-x 2 pi pi   4096 Mar 13  2018 Videos
-rw-r--r-- 1 pi pi 151741 Jan 26  2019 wiringPi-8d188fa.tar.gz
pi@raspberrypi:~ $ tar xfz wiringPi-8d188fa.tar.gz
pi@raspberrypi:~ $ ls -l
total 1060
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Desktop
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Documents
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Downloads
-rw-r--r--  1 pi pi 857528 Jun  5  2017 master.zip
drwxr-xr-x  3 pi pi   4096 Apr 11  2017 mjpg-streamer-master
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Music
drwxr-xr-x  2 pi pi   4096 Jan 19 00:25 myfiles
drwxr-xr-x  2 pi pi   4096 Jan 19  2019 myfiles2
drwxr-xr-x  2 pi pi   4096 Jan 19 00:00 myfiles3
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Pictures
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Public
drwxr-xr-x  2 pi pi   4096 Apr 18  2018 python
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 python_games
drwxr-xr-x  2 pi pi   4096 Apr 13  2018 SmartCar
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Templates
drwxrwxrwx  3 pi pi   4096 Apr 10  2018 tools
drwxr-xr-x  2 pi pi   4096 Mar 13  2018 Videos
drwxr-xr-x 10 pi pi   4096 Mar 14  2018 wiringPi-8d188fa
-rw-r--r--  1 pi pi 151741 Jan 26  2019 wiringPi-8d188fa.tar.gz
pi@raspberrypi:~ $ cd wiringPi-8d188fa
pi@raspberrypi:~/wiringPi-8d188fa $ ls
build           debian-template  gpio        People      update     wiringPi
COPYING.LESSER  devLib           INSTALL     pins        VERSION    wiringPiD
debian          examples         newVersion  README.TXT  version.h
pi@raspberrypi:~/wiringPi-8d188fa $ ./build
wiringPi Build script
=====================


WiringPi Library
[UnInstall]
[Compile] wiringPi.c
[Compile] wiringSerial.c
[Compile] piHiPri.c
[Compile] wiringShift.c
[Compile] piThread.c
[Compile] wiringPiSPI.c
[Compile] wiringPiI2C.c
[Compile] softPwm.c
[Compile] softTone.c
[Compile] mcp23008.c
[Compile] mcp23016.c
[Compile] mcp23017.c
[Compile] mcp23s08.c
[Compile] mcp23s17.c
[Compile] sr595.c
[Compile] pcf8574.c
[Compile] pcf8591.c
wiringPi.c:1309:21: warning: ‘digitalWrite8Dummy’ defined but not used [-Wunused-function]
 static         void digitalWrite8Dummy       (UNU struct wiringPiNodeStruct *node, UNU int pin, UNU int value) { return ; }
                     ^~~~~~~~~~~~~~~~~~
wiringPi.c:1308:21: warning: ‘digitalRead8Dummy’ defined but not used [-Wunused-function]
 static unsigned int digitalRead8Dummy        (UNU struct wiringPiNodeStruct *node, UNU int UNU pin)            { return 0 ; }
                     ^~~~~~~~~~~~~~~~~
[Compile] mcp3002.c
[Compile] mcp3004.c
[Compile] mcp4802.c
[Compile] mcp3422.c
[Compile] max31855.c
[Compile] max5322.c
[Compile] ads1115.c
[Compile] sn3218.c
[Compile] htu21d.c
[Compile] bmp180.c
[Compile] ds18b20.c
[Compile] rht03.c
[Compile] drcSerial.c
[Compile] drcNet.c
[Compile] pseudoPins.c
[Compile] wpiExtensions.c
[Link (Dynamic)]
[Install Headers]
[Install Dynamic Lib]

WiringPi Devices Library
[UnInstall]
[Compile] ds1302.c
[Compile] maxdetect.c
[Compile] piNes.c
[Compile] gertboard.c
[Compile] piFace.c
[Compile] lcd128x64.c
[Compile] lcd.c
[Compile] scrollPhat.c
[Compile] piGlow.c
[Link (Dynamic)]
[Install Headers]
[Install Dynamic Lib]

GPIO Utility
[Compile] gpio.c
[Compile] readall.c
[Link]
[Install]

All Done.

NOTE: To compile programs with wiringPi, you need to add:
    -lwiringPi
  to your compile line(s) To use the Gertboard, MaxDetect, etc.
  code (the devLib), you need to also add:
    -lwiringPiDev
  to your compile line(s).

pi@raspberrypi:~/wiringPi-8d188fa $ gpio -v
gpio version: 2.46
Copyright (c) 2012-2018 Gordon Henderson
This is free software with ABSOLUTELY NO WARRANTY.
For details type: gpio -warranty

Raspberry Pi Details:
  Type: Pi 3+, Revision: 03, Memory: 1024MB, Maker: Sony [Out of Warranty]
  * Device tree is enabled.
  *--> Raspberry Pi 3 Model B Plus Rev 1.3
  * This Raspberry Pi supports user-level GPIO access.
pi@raspberrypi:~/wiringPi-8d188fa $ gpio readall
 +-----+-----+---------+------+---+---Pi 3+--+---+------+---------+-----+-----+
 | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 |     |     |    3.3v |      |   |  1 || 2  |   |      | 5v      |     |     |
 |   2 |   8 |   SDA.1 |  OUT | 1 |  3 || 4  |   |      | 5v      |     |     |
 |   3 |   9 |   SCL.1 |   IN | 1 |  5 || 6  |   |      | 0v      |     |     |
 |   4 |   7 | GPIO. 7 |   IN | 1 |  7 || 8  | 1 | ALT0 | TxD     | 15  | 14  |
 |     |     |      0v |      |   |  9 || 10 | 1 | ALT0 | RxD     | 16  | 15  |
 |  17 |   0 | GPIO. 0 |   IN | 1 | 11 || 12 | 1 | IN   | GPIO. 1 | 1   | 18  |
 |  27 |   2 | GPIO. 2 |  OUT | 0 | 13 || 14 |   |      | 0v      |     |     |
 |  22 |   3 | GPIO. 3 |  OUT | 0 | 15 || 16 | 0 | OUT  | GPIO. 4 | 4   | 23  |
 |     |     |    3.3v |      |   | 17 || 18 | 0 | OUT  | GPIO. 5 | 5   | 24  |
 |  10 |  12 |    MOSI | ALT0 | 0 | 19 || 20 |   |      | 0v      |     |     |
 |   9 |  13 |    MISO |  OUT | 0 | 21 || 22 | 0 | IN   | GPIO. 6 | 6   | 25  |
 |  11 |  14 |    SCLK |  OUT | 0 | 23 || 24 | 1 | OUT  | CE0     | 10  | 8   |
 |     |     |      0v |      |   | 25 || 26 | 0 | IN   | CE1     | 11  | 7   |
 |   0 |  30 |   SDA.0 |   IN | 0 | 27 || 28 | 0 | OUT  | SCL.0   | 31  | 1   |
 |   5 |  21 | GPIO.21 |   IN | 1 | 29 || 30 |   |      | 0v      |     |     |
 |   6 |  22 | GPIO.22 |   IN | 0 | 31 || 32 | 1 | IN   | GPIO.26 | 26  | 12  |
 |  13 |  23 | GPIO.23 |  OUT | 0 | 33 || 34 |   |      | 0v      |     |     |
 |  19 |  24 | GPIO.24 |  OUT | 0 | 35 || 36 | 0 | OUT  | GPIO.27 | 27  | 16  |
 |  26 |  25 | GPIO.25 |  OUT | 0 | 37 || 38 | 0 | OUT  | GPIO.28 | 28  | 20  |
 |     |     |      0v |      |   | 39 || 40 | 0 | OUT  | GPIO.29 | 29  | 21  |
 +-----+-----+---------+------+---+----++----+---+------+---------+-----+-----+
 | BCM | wPi |   Name  | Mode | V | Physical | V | Mode | Name    | wPi | BCM |
 +-----+-----+---------+------+---+---Pi 3+--+---+------+---------+-----+-----+
pi@raspberrypi:~/wiringPi-8d188fa $ cd /
pi@raspberrypi:/ $ ls -ltr
total 71
drwxr-xr-x   4 root root  2560 Jan  1  1970 boot
dr-xr-xr-x 163 root root     0 Jan  1  1970 proc
dr-xr-xr-x  12 root root     0 Jan  1  1970 sys
drwxr-xr-x   2 root root  4096 Mar 13  2018 mnt
drwxr-xr-x   2 root root  4096 Mar 13  2018 srv
drwxr-xr-x   2 root root  4096 Mar 13  2018 media
drwxr-xr-x  16 root root  4096 Mar 13  2018 lib
drwxr-xr-x   2 root root  4096 Mar 13  2018 bin
drwxr-xr-x  11 root root  4096 Mar 13  2018 usr
drwxr-xr-x   7 root root  4096 Mar 13  2018 opt
drwx------   2 root root 16384 Mar 13  2018 lost+found
drwxr-xr-x  11 root root  4096 Mar 13  2018 var
drwxr-xr-x   4 root root  4096 Mar 29  2018 home
drwxr-xr-x   2 root root  4096 Apr 13  2018 sbin
drwx------   6 root root  4096 Apr 13  2018 root
drwxr-xr-x  15 root root  3440 Jan 19 00:17 dev
drwxr-xr-x  24 root root   720 Jan 19 01:04 run
drwxr-xr-x 114 root root  4096 Jan 19 01:08 etc
drwxrwxrwt  12 root root  4096 Jan 19 01:17 tmp
pi@raspberrypi:/ $ su
Password: 
root@raspberrypi:/# ls -ltr
total 71
drwxr-xr-x   4 root root  2560 Jan  1  1970 boot
dr-xr-xr-x 164 root root     0 Jan  1  1970 proc
drwxr-xr-x   2 root root  4096 Mar 13  2018 mnt
drwxr-xr-x   2 root root  4096 Mar 13  2018 srv
drwxr-xr-x   2 root root  4096 Mar 13  2018 media
drwxr-xr-x  16 root root  4096 Mar 13  2018 lib
drwxr-xr-x   2 root root  4096 Mar 13  2018 bin
drwxr-xr-x  11 root root  4096 Mar 13  2018 usr
drwxr-xr-x   7 root root  4096 Mar 13  2018 opt
drwx------   2 root root 16384 Mar 13  2018 lost+found
drwxr-xr-x  11 root root  4096 Mar 13  2018 var
drwxr-xr-x   4 root root  4096 Mar 29  2018 home
drwxr-xr-x   2 root root  4096 Apr 13  2018 sbin
drwx------   6 root root  4096 Apr 13  2018 root
drwxr-xr-x  15 root root  3440 Jan 19 00:17 dev
drwxr-xr-x  24 root root   720 Jan 19 01:04 run
drwxr-xr-x 114 root root  4096 Jan 19 01:08 etc
drwxrwxrwt  12 root root  4096 Jan 19 01:17 tmp
dr-xr-xr-x  12 root root     0 Jan 19 01:17 sys
root@raspberrypi:/# chmod 777 /home
root@raspberrypi:/# ls -ltr
total 71
drwxr-xr-x   4 root root  2560 Jan  1  1970 boot
dr-xr-xr-x 164 root root     0 Jan  1  1970 proc
drwxr-xr-x   2 root root  4096 Mar 13  2018 mnt
drwxr-xr-x   2 root root  4096 Mar 13  2018 srv
drwxr-xr-x   2 root root  4096 Mar 13  2018 media
drwxr-xr-x  16 root root  4096 Mar 13  2018 lib
drwxr-xr-x   2 root root  4096 Mar 13  2018 bin
drwxr-xr-x  11 root root  4096 Mar 13  2018 usr
drwxr-xr-x   7 root root  4096 Mar 13  2018 opt
drwx------   2 root root 16384 Mar 13  2018 lost+found
drwxr-xr-x  11 root root  4096 Mar 13  2018 var
drwxrwxrwx   4 root root  4096 Mar 29  2018 home
drwxr-xr-x   2 root root  4096 Apr 13  2018 sbin
drwx------   6 root root  4096 Apr 13  2018 root
drwxr-xr-x  15 root root  3440 Jan 19 00:17 dev
drwxr-xr-x  24 root root   720 Jan 19 01:04 run
drwxr-xr-x 114 root root  4096 Jan 19 01:08 etc
drwxrwxrwt  12 root root  4096 Jan 19 01:17 tmp
dr-xr-xr-x  12 root root     0 Jan 19 01:17 sys
root@raspberrypi:/# sudo apt-get install cmake
Reading package lists... Done
Building dependency tree       
Reading state information... Done
cmake is already the newest version (3.7.2-1).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
root@raspberrypi:/# saffdf
bash: saffdf: command not found
root@raspberrypi:/# sudo apt-get install libjpeg8-dev
Reading package lists... Done
Building dependency tree       
Reading state information... Done
libjpeg8-dev is already the newest version (8d1-2).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
root@raspberrypi:/# sudo raspi-config
Raspberry Pi 3 Model B Plus Rev 1.3                                               
                                                                                  
                                                                                  
                                                                                  
Raspberry Pi 3 Model B Plus Rev 1.3                                               
                                                                                  
                                                                                  
                                                                                  
Raspberry Pi 3 Model B Plus Rev 1.3                                               
                                                                                  
root@raspberrypi:/# sudo apt-get install libjpeg8-dev
Reading package lists... Done
Building dependency tree       
Reading state information... Done
libjpeg8-dev is already the newest version (8d1-2).
0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
root@raspberrypi:/# sudo raspi-config
Raspberry Pi 3 Model B Plus Rev 1.3                                               
                                                                                  
root@raspberrypi:/# pwd
/
root@raspberrypi:/# cd /home/pi
root@raspberrypi:/home/pi# ls
Desktop     mjpg-streamer-master  myfiles3  python_games  Videos
Documents   Music                 Pictures  SmartCar      wiringPi-8d188fa
Downloads   myfiles               Public    Templates     wiringPi-8d188fa.tar.gz
master.zip  myfiles2              python    tools
root@raspberrypi:/home/pi# cd mjpg-streamer-master
root@raspberrypi:/home/pi/mjpg-streamer-master# ls
mjpg-streamer-experimental  README.md
root@raspberrypi:/home/pi/mjpg-streamer-master# cd mjpg-streamer-experimental
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental# ls
\                input_file.so      mjpg_streamer    output_udp.so  utils.c
_build           input_http.so      mjpg_streamer.c  plugins        utils.h
cmake            input_raspicam.so  mjpg_streamer.h  README.md      www
CMakeLists.txt   input_uvc.so       output_file.so   scripts
Dockerfile       LICENSE            output_http.so   start.sh
docker-start.sh  Makefile           output_rtsp.so   TODO
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental# cd plugins
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins# ls
input_control  input_opencv       input_uvc         output_http
input_file     input_ptp2         output_autofocus  output_rtsp
input.h        input_raspicam     output_file       output_udp
input_http     input_testpicture  output.h          output_viewer
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins# cd input_uvc
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# ls
CMakeLists.txt  dynctrl.h  input_uvc.c   jpeg_utils.h  uvc_compat.h  v4l2uvc.c
dynctrl.c       huffman.h  jpeg_utils.c  README.md     uvcvideo.h    v4l2uvc.h
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# cat input_uvc.c
/*******************************************************************************
# Linux-UVC streaming input-plugin for MJPG-streamer                           #
#                                                                              #
# This package work with the Logitech UVC based webcams with the mjpeg feature #
#                                                                              #
# Copyright (C) 2005 2006 Laurent Pinchart &&  Michel Xhaard                   #
#                    2007 Lucas van Staden                                     #
#                    2007 Tom Stöveken                                         #
#                                                                              #
# This program is free software; you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation; either version 2 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program; if not, write to the Free Software                  #
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA    #
#                                                                              #
*******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/ioctl.h>
#include <errno.h>
#include <signal.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <getopt.h>
#include <pthread.h>
#include <syslog.h>

#include <linux/types.h>          /* for videodev2.h */
#include <linux/videodev2.h>

#include "../../utils.h"
#include "v4l2uvc.h" // this header will includes the ../../mjpg_streamer.h

#ifndef NO_LIBJPEG
    #include "jpeg_utils.h"
    #include "huffman.h"
#endif

#include "dynctrl.h"

//#include "uvcvideo.h"

#define INPUT_PLUGIN_NAME "UVC webcam grabber"

static const struct {
    const char *string;
    const v4l2_std_id vstd;
} norms[] = {
    { "UNKNOWN", V4L2_STD_UNKNOWN },
    { "PAL", V4L2_STD_PAL },
    { "NTSC", V4L2_STD_NTSC },
    { "SECAM", V4L2_STD_SECAM }
};

/* private functions and variables to this plugin */
static globals *pglobal;
static unsigned int minimum_size = 0;
static int dynctrls = 1;
static unsigned int every = 1;

static const struct {
  const char * k;
  const int v;
} exposures[] = {
  { "auto", V4L2_EXPOSURE_AUTO },
  { "shutter-priority", V4L2_EXPOSURE_SHUTTER_PRIORITY },
  { "aperature-priority", V4L2_EXPOSURE_APERTURE_PRIORITY }
};

static const struct {
  const char * k;
  const int v;
} power_line[] = {
  { "disabled", V4L2_CID_POWER_LINE_FREQUENCY_DISABLED },
  { "50hz", V4L2_CID_POWER_LINE_FREQUENCY_50HZ },
  { "60hz", V4L2_CID_POWER_LINE_FREQUENCY_60HZ },
  { "auto", V4L2_CID_POWER_LINE_FREQUENCY_AUTO }
};

void *cam_thread(void *);
void cam_cleanup(void *);
void help(void);
int input_cmd(int plugin, unsigned int control, unsigned int group, int value, char *value_string);

const char *get_name_by_tvnorm(v4l2_std_id vstd) {
        int i;
        for (i=0;i<sizeof(norms);i++) {
                if (vstd == norms[i].vstd) {
                        return norms[i].string;
                }
        }
        return norms[0].string;
}

static context_settings * init_settings() {
    context_settings *settings;
    
    settings = calloc(1, sizeof(context_settings));
    if (settings == NULL) {
        IPRINT("error allocating context");
        exit(EXIT_FAILURE);
    }
    
    settings->quality = 80;
    return settings;
}


/*** plugin interface functions ***/
/******************************************************************************
Description.: This function ializes the plugin. It parses the commandline-
              parameter and stores the default and parsed values in the
              appropriate variables.
Input Value.: param contains among others the command-line string
Return Value: 0 if everything is fine
              1 if "--help" was triggered, in this case the calling programm
              should stop running and leave.
******************************************************************************/
int input_init(input_parameter *param, int id)
{
    char *dev = "/dev/video0", *s;
    int width = 640, height = 480, fps = -1, format = V4L2_PIX_FMT_MJPEG, i;
    v4l2_std_id tvnorm = V4L2_STD_UNKNOWN;
    context *pctx;
    context_settings *settings;
    
    pctx = calloc(1, sizeof(context));
    if (pctx == NULL) {
        IPRINT("error allocating context");
        exit(EXIT_FAILURE);
    }
    
    settings = pctx->init_settings = init_settings();
    pglobal = param->global;
    pglobal->in[id].context = pctx;

    /* initialize the mutes variable */
    if(pthread_mutex_init(&pctx->controls_mutex, NULL) != 0) {
        IPRINT("could not initialize mutex variable\n");
        exit(EXIT_FAILURE);
    }

    param->argv[0] = INPUT_PLUGIN_NAME;

    /* show all parameters for DBG purposes */
    for(i = 0; i < param->argc; i++) {
        DBG("argv[%d]=%s\n", i, param->argv[i]);
    }

    /* parse the parameters */
    reset_getopt();
    while(1) {
        int option_index = 0, c = 0;
        static struct option long_options[] = {
            {"h", no_argument, 0, 0
            },
            {"help", no_argument, 0, 0},
            {"d", required_argument, 0, 0},
            {"device", required_argument, 0, 0},
            {"r", required_argument, 0, 0},
            {"resolution", required_argument, 0, 0},
            {"f", required_argument, 0, 0},
            {"fps", required_argument, 0, 0},
            {"y", no_argument, 0, 0},
            {"yuv", no_argument, 0, 0},
            {"u", no_argument, 0, 0},
            {"uyvy", no_argument, 0, 0},
            {"q", required_argument, 0, 0},
            {"quality", required_argument, 0, 0},
            {"m", required_argument, 0, 0},
            {"minimum_size", required_argument, 0, 0},
            {"n", no_argument, 0, 0},
            {"no_dynctrl", no_argument, 0, 0},
            {"l", required_argument, 0, 0},
            {"led", required_argument, 0, 0},
            {"fourcc", required_argument, 0, 0},
            {"t", required_argument, 0, 0 },
            {"tvnorm", required_argument, 0, 0 },
            {"e", required_argument, 0, 0},
            {"every_frame", required_argument, 0, 0},
            {"sh", required_argument, 0, 0},
            {"co", required_argument, 0, 0},
            {"br", required_argument, 0, 0},
            {"sa", required_argument, 0, 0},
            {"wb", required_argument, 0, 0},
            {"ex", required_argument, 0, 0},
            {"bk", required_argument, 0, 0},
            {"rot", required_argument, 0, 0},
            {"hf", required_argument, 0, 0},
            {"vf", required_argument, 0, 0},
            {"pl", required_argument, 0, 0},
            {"gain", required_argument, 0, 0},
            {"cagc", required_argument, 0, 0},
            {"cb", required_argument, 0, 0},
            {0, 0, 0, 0}
        };

        /* parsing all parameters according to the list above is sufficent */
        c = getopt_long_only(param->argc, param->argv, "", long_options, &option_index);

        /* no more options to parse */
        if(c == -1) break;

        /* unrecognized option */
        if(c == '?') {
            help();
            return 1;
        }

        /* dispatch the given options */
        switch(option_index) {
        /* h, help */
        case 0:
        case 1:
            DBG("case 0,1\n");
            help();
            return 1;
            break;

        /* d, device */
        case 2:
        case 3:
            DBG("case 2,3\n");
            dev = realpath(optarg, NULL);
            break;

        /* r, resolution */
        case 4:
        case 5:
            DBG("case 4,5\n");
            parse_resolution_opt(optarg, &width, &height);
            break;

        /* f, fps */
        case 6:
        case 7:
            DBG("case 6,7\n");
            fps = atoi(optarg);
            break;

        /* y, yuv */
        #ifndef NO_LIBJPEG
        case 8:
        case 9:
            DBG("case 8,9\n");
            format = V4L2_PIX_FMT_YUYV;
            break;
        #endif
        /* u, uyvy */
        #ifndef NO_LIBJPEG
        case 10:
        case 11:
            DBG("case 10,11\n");
            format = V4L2_PIX_FMT_UYVY;
            break;
        #endif
        /* q, quality */
        #ifndef NO_LIBJPEG
        case 12:
        OPTION_INT(13, quality)
            settings->quality = MIN(MAX(settings->quality, 0), 100);
            break;
        #endif
        /* m, minimum_size */
        case 14:
        case 15:
            DBG("case 14,15\n");
            minimum_size = MAX(atoi(optarg), 0);
            break;

        /* n, no_dynctrl */
        case 16:
        case 17:
            DBG("case 16,17\n");
            dynctrls = 0;
            break;

            /* l, led */
        case 18:
        case 19:/*
        DBG("case 18,19\n");
        if ( strcmp("on", optarg) == 0 ) {
          led = IN_CMD_LED_ON;
        } else if ( strcmp("off", optarg) == 0 ) {
          led = IN_CMD_LED_OFF;
        } else if ( strcmp("auto", optarg) == 0 ) {
          led = IN_CMD_LED_AUTO;
        } else if ( strcmp("blink", optarg) == 0 ) {
          led = IN_CMD_LED_BLINK;
        }*/
            break;
        /* fourcc */
        #ifndef NO_LIBJPEG
        case 20:
            DBG("case 20\n");
            if (strcmp(optarg, "RGBP") == 0) {
                format = V4L2_PIX_FMT_RGB565;
            } else {
              fprintf(stderr," i: FOURCC codec '%s' not supported\n", optarg);
            }
            break;
        #endif
        /* t, tvnorm */
        case 21:
        case 22:
            DBG("case 21,22\n");
            if (strcasecmp("pal",optarg) == 0 ) {
                     tvnorm = V4L2_STD_PAL;
            } else if ( strcasecmp("ntsc",optarg) == 0 ) {
                     tvnorm = V4L2_STD_NTSC;
            } else if ( strcasecmp("secam",optarg) == 0 ) {
                     tvnorm = V4L2_STD_SECAM;
            }
            break;
        case 23:
        /* e, every */
        case 24:
            DBG("case 24\n");
            every = MAX(atoi(optarg), 1);
            break;

        /* options */
        OPTION_INT(25, sh)
            break;
        OPTION_INT(26, co)
            break;
        OPTION_INT_AUTO(27, br)
            break;
        OPTION_INT(28, sa)
            break;
        OPTION_INT_AUTO(29, wb)
            break;
        OPTION_MULTI_OR_INT(30, ex_auto, V4L2_EXPOSURE_MANUAL, ex, exposures)
            break;
        OPTION_INT(31, bk)
            break;
        OPTION_INT(32, rot)
            break;
        OPTION_BOOL(33, hf)
            break;
        OPTION_BOOL(34, vf)
            break;
        OPTION_MULTI(35, pl, power_line)
            break;
        OPTION_INT_AUTO(36, gain)
            break;
        OPTION_INT_AUTO(37, cagc)
            break;
        OPTION_INT_AUTO(38, cb)
            break;
    
        default:
            DBG("default case\n");
            help();
            return 1;
        }
    }
    DBG("input id: %d\n", id);
    pctx->id = id;
    pctx->pglobal = param->global;

    /* allocate webcam datastructure */
    pctx->videoIn = calloc(1, sizeof(struct vdIn));
    if(pctx->videoIn == NULL) {
        IPRINT("not enough memory for videoIn\n");
        exit(EXIT_FAILURE);
    }
    
    /* display the parsed values */
    IPRINT("Using V4L2 device.: %s\n", dev);
    IPRINT("Desired Resolution: %i x %i\n", width, height);
    IPRINT("Frames Per Second.: %i\n", fps);
    char *fmtString = NULL;
    switch (format) {
        case V4L2_PIX_FMT_MJPEG:
            fmtString = "JPEG";
            break;
        #ifndef NO_LIBJPG
            case V4L2_PIX_FMT_YUYV:
                fmtString = "YUYV";
                break;
            case V4L2_PIX_FMT_UYVY:
                fmtString = "UYVY";
                break;
            case V4L2_PIX_FMT_RGB565:
                fmtString = "RGB565";
                break;
        #endif
        default:
            fmtString = "Unknown format";
    }

    IPRINT("Format............: %s\n", fmtString);
    #ifndef NO_LIBJPEG
        if(format != V4L2_PIX_FMT_MJPEG)
            IPRINT("JPEG Quality......: %d\n", settings->quality);
    #endif

    if (tvnorm != V4L2_STD_UNKNOWN) {
        IPRINT("TV-Norm...........: %s\n", get_name_by_tvnorm(tvnorm));
    } else {
        IPRINT("TV-Norm...........: DEFAULT\n");
    }

    DBG("vdIn pn: %d\n", id);
    /* open video device and prepare data structure */
    if(init_videoIn(pctx->videoIn, dev, width, height, fps, format, 1, pctx->pglobal, id, tvnorm) < 0) {
        IPRINT("init_VideoIn failed\n");
        closelog();
        exit(EXIT_FAILURE);
    }
    /*
     * recent linux-uvc driver (revision > ~#125) requires to use dynctrls
     * for pan/tilt/focus/...
     * dynctrls must get initialized
     */
    if(dynctrls)
        initDynCtrls(pctx->videoIn->fd);
    
    enumerateControls(pctx->videoIn, pctx->pglobal, id); // enumerate V4L2 controls after UVC extended mapping
    
    return 0;
}

/******************************************************************************
Description.: Stops the execution of worker thread
Input Value.: -
Return Value: always 0
******************************************************************************/
int input_stop(int id)
{
    input * in = &pglobal->in[id];
    context *pctx = (context*)in->context;
    
    DBG("will cancel camera thread #%02d\n", id);
    pthread_cancel(pctx->threadID);
    return 0;
}

/******************************************************************************
Description.: spins of a worker thread
Input Value.: -
Return Value: always 0
******************************************************************************/
int input_run(int id)
{
    input * in = &pglobal->in[id];
    context *pctx = (context*)in->context;
    
    in->buf = malloc(pctx->videoIn->framesizeIn);
    if(in->buf == NULL) {
        fprintf(stderr, "could not allocate memory\n");
        exit(EXIT_FAILURE);
    }

    DBG("launching camera thread #%02d\n", id);
    /* create thread and pass context to thread function */
    pthread_create(&(pctx->threadID), NULL, cam_thread, in);
    pthread_detach(pctx->threadID);
    return 0;
}

/*** private functions for this plugin below ***/
/******************************************************************************
Description.: print a help message to stderr
Input Value.: -
Return Value: -
******************************************************************************/
void help(void)
{
    int i;

    fprintf(stderr, " ---------------------------------------------------------------\n" \
    " Help for input plugin..: "INPUT_PLUGIN_NAME"\n" \
    " ---------------------------------------------------------------\n" \
    " The following parameters can be passed to this plugin:\n\n" \
    " [-d | --device ].......: video device to open (your camera)\n" \
    " [-r | --resolution ]...: the resolution of the video device,\n" \
    "                          can be one of the following strings:\n" \
    "                          ");
    
    resolutions_help("                          ");

    fprintf(stderr,
    " [-f | --fps ]..........: frames per second\n" \
    "                          (activates YUYV format, disables MJPEG)\n" \
    " [-q | --quality ] .....: set quality of JPEG encoding\n" \
    " [-m | --minimum_size ].: drop frames smaller then this limit, useful\n" \
    "                          if the webcam produces small-sized garbage frames\n" \
    "                          may happen under low light conditions\n" \
    " [-e | --every_frame ]..: drop all frames except numbered\n" \
    " [-n | --no_dynctrl ]...: do not initalize dynctrls of Linux-UVC driver\n" \
    " [-l | --led ]..........: switch the LED \"on\", \"off\", let it \"blink\" or leave\n" \
    "                          it up to the driver using the value \"auto\"\n" \
    " [-t | --tvnorm ] ......: set TV-Norm pal, ntsc or secam\n" \
    " [-u | --uyvy ] ........: Use UYVY format, default: MJPEG (uses more cpu power)\n" \
    " [-y | --yuv  ] ........: Use YUV format, default: MJPEG (uses more cpu power)\n" \
    " [-fourcc ] ............: Use FOURCC codec 'argopt', \n" \
    "                          currently supported codecs are: RGBP \n" \
    " ---------------------------------------------------------------\n");

    fprintf(stderr, "\n"                                                \
    " Optional parameters (may not be supported by all cameras):\n\n"
    " [-br ].................: Set image brightness (auto or integer)\n"\
    " [-co ].................: Set image contrast (integer)\n"\
    " [-sh ].................: Set image sharpness (integer)\n"\
    " [-sa ].................: Set image saturation (integer)\n"\
    " [-cb ].................: Set color balance (auto or integer)\n"\
    " [-wb ].................: Set white balance (auto or integer)\n"\
    " [-ex ].................: Set exposure (auto, shutter-priority, aperature-priority, or integer)\n"\
    " [-bk ].................: Set backlight compensation (integer)\n"\
    " [-rot ]................: Set image rotation (0-359)\n"\
    " [-hf ].................: Set horizontal flip (true/false)\n"\
    " [-vf ].................: Set vertical flip (true/false)\n"\
    " [-pl ].................: Set power line filter (disabled, 50hz, 60hz, auto)\n"\
    " [-gain ]...............: Set gain (auto or integer)\n"\
    " [-cagc ]...............: Set chroma gain control (auto or integer)\n"\
    " ---------------------------------------------------------------\n\n"\
    );
}

/******************************************************************************
Description.: this thread worker grabs a frame and copies it to the global buffer
Input Value.: unused
Return Value: unused, always NULL
******************************************************************************/
void *cam_thread(void *arg)
{
    input * in = (input*)arg;
    context *pcontext = (context*)in->context;
    context_settings *settings = pcontext->init_settings;
    
    unsigned int every_count = 0;
    int quality = settings->quality;
    
    /* set cleanup handler to cleanup allocated resources */
    pthread_cleanup_push(cam_cleanup, in);
    
    #define V4L_OPT_SET(vid, var, desc) \
      if (input_cmd(pcontext->id, vid, IN_CMD_V4L2, settings->var, NULL) != 0) {\
          fprintf(stderr, "Failed to set " desc "\n"); \
      } else { \
          printf(" i: %-18s: %d\n", desc, settings->var); \
      }
    
    #define V4L_INT_OPT(vid, var, desc) \
      if (settings->var##_set) { \
          V4L_OPT_SET(vid, var, desc) \
      }
    
    /* V4L options */
    V4L_INT_OPT(V4L2_CID_SHARPNESS, sh, "sharpness")
    V4L_INT_OPT(V4L2_CID_CONTRAST, co, "contrast")
    V4L_INT_OPT(V4L2_CID_SATURATION, sa, "saturation")
    V4L_INT_OPT(V4L2_CID_BACKLIGHT_COMPENSATION, bk, "backlight compensation")
    V4L_INT_OPT(V4L2_CID_ROTATE, rot, "rotation")
    V4L_INT_OPT(V4L2_CID_HFLIP, hf, "hflip")
    V4L_INT_OPT(V4L2_CID_VFLIP, vf, "vflip")
    V4L_INT_OPT(V4L2_CID_VFLIP, pl, "power line filter")
    
    if (settings->br_set) {
        V4L_OPT_SET(V4L2_CID_AUTOBRIGHTNESS, br_auto, "auto brightness mode")
        
        if (settings->br_auto == 0) {
            V4L_OPT_SET(V4L2_CID_BRIGHTNESS, br, "brightness")
        }
    }
    
    if (settings->wb_set) {
        V4L_OPT_SET(V4L2_CID_AUTO_WHITE_BALANCE, wb_auto, "auto white balance mode")
        
        if (settings->wb_auto == 0) {
            V4L_OPT_SET(V4L2_CID_WHITE_BALANCE_TEMPERATURE, wb, "white balance temperature")
        }
    }
    
    if (settings->ex_set) {
        V4L_OPT_SET(V4L2_CID_EXPOSURE_AUTO, ex_auto, "exposure mode")
        if (settings->ex_auto == V4L2_EXPOSURE_MANUAL) {
            V4L_OPT_SET(V4L2_CID_EXPOSURE_ABSOLUTE, ex, "absolute exposure")
        }
    }
    
    if (settings->gain_set) {
        V4L_OPT_SET(V4L2_CID_AUTOGAIN, gain_auto, "auto gain mode")
        
        if (settings->gain_auto == 0) {
            V4L_OPT_SET(V4L2_CID_GAIN, gain, "gain")
        }
    }
    
    if (settings->cagc_set) {
        V4L_OPT_SET(V4L2_CID_AUTO_WHITE_BALANCE, cagc_auto, "chroma gain mode")
        
        if (settings->cagc_auto == 0) {
            V4L_OPT_SET(V4L2_CID_WHITE_BALANCE_TEMPERATURE, cagc, "chroma gain")
        }
    }
    
    if (settings->cb_set) {
        V4L_OPT_SET(V4L2_CID_HUE_AUTO, cb_auto, "color balance mode")
        
        if (settings->cb_auto == 0) {
            V4L_OPT_SET(V4L2_CID_HUE, cagc, "color balance")
        }
    }
    
    free(settings);
    settings = NULL;
    pcontext->init_settings = NULL;

    while(!pglobal->stop) {
        while(pcontext->videoIn->streamingState == STREAMING_PAUSED) {
            usleep(1); // maybe not the best way so FIXME
        }

        /* grab a frame */
        if(uvcGrab(pcontext->videoIn) < 0) {
            IPRINT("Error grabbing frames\n");
            exit(EXIT_FAILURE);
        }

        if ( every_count < every - 1 ) {
            DBG("dropping %d frame for every=%d\n", every_count + 1, every);
            ++every_count;
            continue;
        } else {
            every_count = 0;
        }

        //DBG("received frame of size: %d from plugin: %d\n", pcontext->videoIn->tmpbytesused, pcontext->id);

        /*
         * Workaround for broken, corrupted frames:
         * Under low light conditions corrupted frames may get captured.
         * The good thing is such frames are quite small compared to the regular pictures.
         * For example a VGA (640x480) webcam picture is normally >= 8kByte large,
         * corrupted frames are smaller.
         */
        if(pcontext->videoIn->tmpbytesused < minimum_size) {
            DBG("dropping too small frame, assuming it as broken\n");
            continue;
        }

        // use software frame dropping on low fps
        if (pcontext->videoIn->soft_framedrop == 1) {
            unsigned long last = pglobal->in[pcontext->id].timestamp.tv_sec * 1000 +
                                (pglobal->in[pcontext->id].timestamp.tv_usec/1000); // convert to ms
            unsigned long current = pcontext->videoIn->buf.timestamp.tv_sec * 1000 +
                                    pcontext->videoIn->buf.timestamp.tv_usec/1000; // convert to ms

            // if the requested time did not esplashed skip the frame
            if ((current - last) < pcontext->videoIn->frame_period_time) {
                //DBG("Last frame taken %d ms ago so drop it\n", (current - last));
                continue;
            }
            DBG("Lagg: %ld\n", (current - last) - pcontext->videoIn->frame_period_time);
        }

        /* copy JPG picture to global buffer */
        pthread_mutex_lock(&pglobal->in[pcontext->id].db);

        /*
         * If capturing in YUV mode convert to JPEG now.
         * This compression requires many CPU cycles, so try to avoid YUV format.
         * Getting JPEGs straight from the webcam, is one of the major advantages of
         * Linux-UVC compatible devices.
         */
        #ifndef NO_LIBJPEG
        if ((pcontext->videoIn->formatIn == V4L2_PIX_FMT_YUYV) ||
            (pcontext->videoIn->formatIn == V4L2_PIX_FMT_UYVY) ||
            (pcontext->videoIn->formatIn == V4L2_PIX_FMT_RGB565) ) {
            DBG("compressing frame from input: %d\n", (int)pcontext->id);
            pglobal->in[pcontext->id].size = compress_image_to_jpeg(pcontext->videoIn, pglobal->in[pcontext->id].buf, pcontext->videoIn->framesizeIn, quality);
            /* copy this frame's timestamp to user space */
            pglobal->in[pcontext->id].timestamp = pcontext->videoIn->buf.timestamp;
        } else {
        #endif
            DBG("copying frame from input: %d\n", (int)pcontext->id);
            pglobal->in[pcontext->id].size = memcpy_picture(pglobal->in[pcontext->id].buf, pcontext->videoIn->tmpbuffer, pcontext->videoIn->tmpbytesused);
            /* copy this frame's timestamp to user space */
            pglobal->in[pcontext->id].timestamp = pcontext->videoIn->tmptimestamp;
        #ifndef NO_LIBJPEG
        }
        #endif

#if 0
        /* motion detection can be done just by comparing the picture size, but it is not very accurate!! */
        if((prev_size - global->size)*(prev_size - global->size) > 4 * 1024 * 1024) {
            DBG("motion detected (delta: %d kB)\n", (prev_size - global->size) / 1024);
        }
        prev_size = global->size;
#endif


        /* signal fresh_frame */
        pthread_cond_broadcast(&pglobal->in[pcontext->id].db_update);
        pthread_mutex_unlock(&pglobal->in[pcontext->id].db);
    }

    DBG("leaving input thread, calling cleanup function now\n");
    pthread_cleanup_pop(1);

    return NULL;
}

/******************************************************************************
Description.:
Input Value.:
Return Value:
******************************************************************************/
void cam_cleanup(void *arg)
{
    input * in = (input*)arg;
    context *pctx = (context*)in->context;
    
    IPRINT("cleaning up resources allocated by input thread\n");

    if (pctx->videoIn != NULL) {
        close_v4l2(pctx->videoIn);
        free(pctx->videoIn->tmpbuffer);
        free(pctx->videoIn);
        pctx->videoIn = NULL;
    }
    
    free(in->buf);
    in->buf = NULL;
    in->size = 0;
}

/******************************************************************************
Description.: process commands, allows to set v4l2 controls
Input Value.: * control specifies the selected v4l2 control's id
                see struct v4l2_queryctr in the videodev2.h
              * value is used for control that make use of a parameter.
Return Value: depends in the command, for most cases 0 means no errors and
              -1 signals an error. This is just rule of thumb, not more!
******************************************************************************/
int input_cmd(int plugin_number, unsigned int control_id, unsigned int group, int value, char *value_string)
{
    input * in = &pglobal->in[plugin_number];
    context *pctx = (context*)in->context;
    
    int ret = -1;
    int i = 0;
    DBG("Requested cmd (id: %d) for the %d plugin. Group: %d value: %d\n", control_id, plugin_number, group, value);
    switch(group) {
    case IN_CMD_GENERIC: {
            int i;
            for (i = 0; i<in->parametercount; i++) {
                if ((in->in_parameters[i].ctrl.id == control_id) &&
                    (in->in_parameters[i].group == IN_CMD_GENERIC)){
                    DBG("Generic control found (id: %d): %s\n", control_id, in->in_parameters[i].ctrl.name);
                    DBG("New %s value: %d\n", in->in_parameters[i].ctrl.name, value);
                    return 0;
                }
            }
            DBG("Requested generic control (%d) did not found\n", control_id);
            return -1;
        } break;
    case IN_CMD_V4L2: {
            ret = v4l2SetControl(pctx->videoIn, control_id, value, plugin_number, pglobal);
            if(ret == 0) {
                in->in_parameters[i].value = value;
            } else {
                DBG("v4l2SetControl failed: %d\n", ret);
            }
            return ret;
        } break;
    case IN_CMD_RESOLUTION: {
        // the value points to the current formats nth resolution
        if(value > (in->in_formats[in->currentFormat].resolutionCount - 1)) {
            DBG("The value is out of range");
            return -1;
        }
        int height = in->in_formats[in->currentFormat].supportedResolutions[value].height;
        int width = in->in_formats[in->currentFormat].supportedResolutions[value].width;
        ret = setResolution(pctx->videoIn, width, height);
        if(ret == 0) {
            in->in_formats[in->currentFormat].currentResolution = value;
        }
        return ret;
    } break;
    case IN_CMD_JPEG_QUALITY:
        if((value >= 0) && (value < 101)) {
            in->jpegcomp.quality = value;
            if(IOCTL_VIDEO(pctx->videoIn->fd, VIDIOC_S_JPEGCOMP, &in->jpegcomp) != EINVAL) {
                DBG("JPEG quality is set to %d\n", value);
                ret = 0;
            } else {
                DBG("Setting the JPEG quality is not supported\n");
            }
        } else {
            DBG("Quality is out of range\n");
        }
        break;
    }
    return ret;
}

root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# vim input_uvc.c
/*******************************************************************************
# Linux-UVC streaming input-plugin for MJPG-streamer                           #
#                                                                              #
# This package work with the Logitech UVC based webcams with the mjpeg feature #
#                                                                              #
# Copyright (C) 2005 2006 Laurent Pinchart &&  Michel Xhaard                   #
#                    2007 Lucas van Staden                                     #
#                    2007 Tom Stöveken                                         #
#                                                                              #
# This program is free software; you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation; either version 2 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
     #
     #
     #
     #
     #
     #
     #
     #
     #
     #
     #
     #
     #
    */
 25 
 26 #include <stdio.h>
 27 #include <stdlib.h>
 28 #include <unistd.h>
 28 #include <unistd.h>
 29 #include <string.h>
 30 #include <sys/ioctl.h>
 31 #include <errno.h>
 32 #include <signal.h>
 33 #include <sys/socket.h>
 34 #include <arpa/inet.h>
 35 #include <sys/types.h>
 36 #include <sys/stat.h>
 37 #include <getopt.h>
 38 #include <pthread.h>
 39 #include <syslog.h>
 40 
 41 #include <linux/types.h>          /* for videodev2.h */
 42 #include <linux/videodev2.h>
 43 
 44 #include "../../utils.h"
 45 #include "v4l2uvc.h" // this header will includes the ../../mjpg_streamer.h
 46 
 47 #ifndef NO_LIBJPEG
 47 #ifndef NO_LIBJPEG
 48     #include "jpeg_utils.h"
 49     #include "huffman.h"
 50 #endif
 51 
 52 #include "dynctrl.h"
 53 
 54 //#include "uvcvideo.h"
 55 
 56 #define INPUT_PLUGIN_NAME "UVC webcam grabber"
 57 
 58 static const struct {
 59     const char *string;
 60     const v4l2_std_id vstd;
 61 } norms[] = {
 62     { "UNKNOWN", V4L2_STD_UNKNOWN },
 63     { "PAL", V4L2_STD_PAL },
 64     { "NTSC", V4L2_STD_NTSC },
 65     { "SECAM", V4L2_STD_SECAM }
 66 };
 66 };
 67 
 68 /* private functions and variables to this plugin */
 69 static globals *pglobal;
 70 static unsigned int minimum_size = 0;
 71 static int dynctrls = 1;
 72 static unsigned int every = 1;
 73 
 74 static const struct {
 75   const char * k;
 76   const int v;
 77 } exposures[] = {
 78   { "auto", V4L2_EXPOSURE_AUTO },
 79   { "shutter-priority", V4L2_EXPOSURE_SHUTTER_PRIORITY },
 80   { "aperature-priority", V4L2_EXPOSURE_APERTURE_PRIORITY }
 81 };
 82 
 83 static const struct {
 84   const char * k;
 85   const int v;
 85   const int v;
 86 } power_line[] = {
 87   { "disabled", V4L2_CID_POWER_LINE_FREQUENCY_DISABLED },
 88   { "50hz", V4L2_CID_POWER_LINE_FREQUENCY_50HZ },
 89   { "60hz", V4L2_CID_POWER_LINE_FREQUENCY_60HZ },
 90   { "auto", V4L2_CID_POWER_LINE_FREQUENCY_AUTO }
 91 };
 92 
 93 void *cam_thread(void *);
 94 void cam_cleanup(void *);
 95 void help(void);
     char *value_string);
 97 
 98 const char *get_name_by_tvnorm(v4l2_std_id vstd) {
 99         int i;
100         for (i=0;i<sizeof(norms);i++) {
101                 if (vstd == norms[i].vstd) {
102                         return norms[i].string;
103                 }
103                 }
104         }
105         return norms[0].string;
106 }
107 
108 static context_settings * init_settings() {
109     context_settings *settings;
110 
111     settings = calloc(1, sizeof(context_settings));
112     if (settings == NULL) {
113         IPRINT("error allocating context");
114         exit(EXIT_FAILURE);
115     }
116 
117     settings->quality = 80;
118     return settings;
119 }
120 
121 
122 /*** plugin interface functions ***/
121 
122 /*** plugin interface functions ***/
    *
124 Description.: This function ializes the plugin. It parses the commandline-
125               parameter and stores the default and parsed values in the
126               appropriate variables.
127 Input Value.: param contains among others the command-line string
128 Return Value: 0 if everything is fine
129               1 if "--help" was triggered, in this case the calling programm
130               should stop running and leave.
    /
132 int input_init(input_parameter *param, int id)
133 {
134     char *dev = "/dev/video0", *s;
135     int width = 640, height = 480, fps = -1, format = V4L2_PIX_FMT_MJPEG, i;
136     v4l2_std_id tvnorm = V4L2_STD_UNKNOWN;
137     context *pctx;
138     context_settings *settings;
138     context_settings *settings;
139 
140     pctx = calloc(1, sizeof(context));
141     if (pctx == NULL) {
142         IPRINT("error allocating context");
143         exit(EXIT_FAILURE);
144     }
145 
146     settings = pctx->init_settings = init_settings();
147     pglobal = param->global;
148     pglobal->in[id].context = pctx;
149 
150     /* initialize the mutes variable */
151     if(pthread_mutex_init(&pctx->controls_mutex, NULL) != 0) {
152         IPRINT("could not initialize mutex variable\n");
153         exit(EXIT_FAILURE);
154     }
155 
156     param->argv[0] = INPUT_PLUGIN_NAME;
157 
158     /* show all parameters for DBG purposes */
159     for(i = 0; i < param->argc; i++) {
160         DBG("argv[%d]=%s\n", i, param->argv[i]);
126               appropriate variables.
118     return settings;
133 {
135     int width = 640, height = 480, fps = -1, format = V4L2_PIX_FMT_MJPEG, i;
136     v4l2_std_id tvnorm = V4L2_STD_UNKNOWN;
137     context *pctx;
138     context_settings *settings;
139 
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# vim input_uvc.c
              parameter and stores the default and parsed values in the
              appropriate variables.
Input Value.: param contains among others the command-line string
Return Value: 0 if everything is fine
              1 if "--help" was triggered, in this case the calling programm
              should stop running and leave.
******************************************************************************/
int input_init(input_parameter *param, int id)
{
    char *dev = "/dev/video0", *s;
    int width = 640, height = 480, fps = -1, format = V4L2_PIX_FMT_MJPEG, i;
    v4l2_std_id tvnorm = V4L2_STD_UNKNOWN;
    context *pctx;
    pctx = calloc(1, sizeof(context));
        exit(EXIT_FAILURE);
125               parameter and stores the default and parsed values in the
126               appropriate variables.
127 Input Value.: param contains among others the command-line string
128 Return Value: 0 if everything is fine
129               1 if "--help" was triggered, in this case the calling programm
130               should stop running and leave.
132 int input_init(input_parameter *param, int id)
135     int width = 640, height = 480, fps = -1, format = V4L2_PIX_FMT_MJPEG, i;
136     v4l2_std_id tvnorm = V4L2_STD_UNKNOWN;
138     context_settings *settings;
140     pctx = calloc(1, sizeof(context));
142         IPRINT("error allocating context");
143         exit(EXIT_FAILURE);
"input_uvc.c" 813L, 29175C written                    
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# make clean all
make: *** No rule to make target 'clean'.  Stop.
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# pwd
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_uvc# cd ..
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins# pwd
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins# cd ..
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental# StopStoroot@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental# StopSt
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental# make clean all
[ ! -f _build/Makefile ] || make -C _build clean
make[1]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[2]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[2]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[1]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
rm -f mjpg_streamer *.so
[ -d _build ] || mkdir _build
[ -f _build/Makefile ] || (cd _build && cmake  -DCMAKE_BUILD_TYPE=Release ..)
make -C _build
make[1]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[2]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[  4%] Building C object CMakeFiles/mjpg_streamer.dir/mjpg_streamer.c.o
[  8%] Building C object CMakeFiles/mjpg_streamer.dir/utils.c.o
[ 12%] Linking C executable mjpg_streamer
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 12%] Built target mjpg_streamer
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 16%] Building C object plugins/input_file/CMakeFiles/input_file.dir/input_file.c.o
[ 20%] Linking C shared library input_file.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 20%] Built target input_file
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 24%] Building C object plugins/input_http/CMakeFiles/input_http.dir/input_http.c.o
[ 28%] Building C object plugins/input_http/CMakeFiles/input_http.dir/misc.c.o
[ 32%] Building C object plugins/input_http/CMakeFiles/input_http.dir/mjpg-proxy.c.o
[ 36%] Linking C shared library input_http.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 36%] Built target input_http
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 40%] Building C object plugins/input_raspicam/CMakeFiles/input_raspicam.dir/input_raspicam.c.o
In file included from /home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/input_raspicam.c:51:0:
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c: In function ‘raspicamcontrol_set_saturation’:
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c:762:32: warning: implicit declaration of function ‘mmal_port_parameter_set_rational’ [-Wimplicit-function-declaration]
       ret = mmal_status_to_int(mmal_port_parameter_set_rational(camera->control, MMAL_PARAMETER_SATURATION, value));
                                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c: In function ‘raspicamcontrol_set_ISO’:
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c:864:30: warning: implicit declaration of function ‘mmal_port_parameter_set_uint32’ [-Wimplicit-function-declaration]
    return mmal_status_to_int(mmal_port_parameter_set_uint32(camera->control, MMAL_PARAMETER_ISO, ISO));
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c: In function ‘raspicamcontrol_set_video_stabilisation’:
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c:899:30: warning: implicit declaration of function ‘mmal_port_parameter_set_boolean’ [-Wimplicit-function-declaration]
    return mmal_status_to_int(mmal_port_parameter_set_boolean(camera->control, MMAL_PARAMETER_VIDEO_STABILISATION, vstabilisation));
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c: In function ‘raspicamcontrol_set_exposure_compensation’:
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/RaspiCamControl.c:913:30: warning: implicit declaration of function ‘mmal_port_parameter_set_int32’ [-Wimplicit-function-declaration]
    return mmal_status_to_int(mmal_port_parameter_set_int32(camera->control, MMAL_PARAMETER_EXPOSURE_COMP , exp_comp));
                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/input_raspicam.c: In function ‘worker_thread’:
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/input_raspicam.c:880:10: warning: implicit declaration of function ‘mmal_port_pool_create’ [-Wimplicit-function-declaration]
   pool = mmal_port_pool_create(encoder_output, encoder_output->buffer_num, encoder_output->buffer_size);
          ^~~~~~~~~~~~~~~~~~~~~
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/input_raspicam.c:880:8: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
   pool = mmal_port_pool_create(encoder_output, encoder_output->buffer_num, encoder_output->buffer_size);
        ^
/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/plugins/input_raspicam/input_raspicam.c:1052:5: warning: implicit declaration of function ‘mmal_port_pool_destroy’ [-Wimplicit-function-declaration]
     mmal_port_pool_destroy(encoder->output[0], pool);
     ^~~~~~~~~~~~~~~~~~~~~~
[ 44%] Linking C shared library input_raspicam.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 44%] Built target input_raspicam
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
Scanning dependencies of target input_uvc
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 48%] Building C object plugins/input_uvc/CMakeFiles/input_uvc.dir/dynctrl.c.o
[ 52%] Building C object plugins/input_uvc/CMakeFiles/input_uvc.dir/input_uvc.c.o
[ 56%] Building C object plugins/input_uvc/CMakeFiles/input_uvc.dir/jpeg_utils.c.o
[ 60%] Building C object plugins/input_uvc/CMakeFiles/input_uvc.dir/v4l2uvc.c.o
[ 64%] Linking C shared library input_uvc.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 64%] Built target input_uvc
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 68%] Building C object plugins/output_file/CMakeFiles/output_file.dir/output_file.c.o
[ 72%] Linking C shared library output_file.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 72%] Built target output_file
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 76%] Building C object plugins/output_http/CMakeFiles/output_http.dir/httpd.c.o
[ 80%] Building C object plugins/output_http/CMakeFiles/output_http.dir/output_http.c.o
[ 84%] Linking C shared library output_http.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 84%] Built target output_http
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 88%] Building C object plugins/output_rtsp/CMakeFiles/output_rtsp.dir/output_rtsp.c.o
[ 92%] Linking C shared library output_rtsp.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 92%] Built target output_rtsp
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[3]: Entering directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[ 96%] Building C object plugins/output_udp/CMakeFiles/output_udp.dir/output_udp.c.o
[100%] Linking C shared library output_udp.so
make[3]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
[100%] Built target output_udp
make[2]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
make[1]: Leaving directory '/home/pi/mjpg-streamer-master/mjpg-streamer-experimental/_build'
root@raspberrypi:/home/pi/mjpg-streamer-master/mjpg-streamer-experimental# sudo raspi-config
Raspberry Pi 3 Model B Plus Rev 1.3                                               
                                                                                  
